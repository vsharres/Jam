// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "Object.h"
#include "Statement.generated.h"

DECLARE_LOG_CATEGORY_EXTERN(StatementLog, Log, All);

/**A statement in a exclusion logic. */
UCLASS()
class PROJETOJAM_API UStatement : public UObject
{
	GENERATED_BODY()

protected:

	/**The complete text of the statement. */
	UPROPERTY(VisibleAnywhere, Category = Statement)
		FString Text;

	/**The key name of the statement. */
	UPROPERTY(VisibleAnywhere, Category = Statement)
		FName KeyName;

	/**The vertices in the statement, represents the nodes of the tree generated by the statement. */
	UPROPERTY(VisibleAnywhere, Category = Statement)
		TArray<FString> Vertices;

	/**The edges between the vertices, represents the operators "." and "!" */
	UPROPERTY(VisibleAnywhere, Category = Statement)
		TArray<FString > Edges;

public:
	/* Default Constructor*/
	UStatement();

	/**
	* Called to get the complete text of the statement.
	* @return An FString with the text.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Get Text", Keywords = "Get Text"), Category = Statement)
		FString GetText();

	/**
	* Called to get the key name of the statement.
	* @return An FString with the key name.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Get KeyName", Keywords = "Get Key"), Category = Statement)
		FName GetKeyName();

	/**
	* Called to get the array with all of the vertices in the statement.
	* @return An FString array with all of the vertices.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Get Vertices", Keywords = "Get Vertices"), Category = Statement)
		TArray<FString> GetVertices();

	/**
	* Called to get all of the edges in the statement. The index 0 is ignored.
	* As for any given statement, the number of edges is always equals to the number of vertices minus one.
	* @return An FString array with all of the edges.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Get Edges", Keywords = "Get Edges"), Category = Statement)
		TArray<FString > GetEdges();

	void SetStatement(const FString& Text);

	/**
	* Called to generate the Key of the statement.
	*/
	UFUNCTION(BlueprintCallable, meta = (DisplayName = "Generate Key", Keywords = "Generate Key"), Category = Statement)
		void GenerateKey();

	/**
	* Called to get the statement's last vertex.
	* @return An FString with the last vertex.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Last Vertex", Keywords = "Last Vertex"), Category = Statement)
		FString LastVertex();

	/**
	* Called to get the statement's branch, i.e; the segment of the statement after a giver vertex index.
	* @return An FString with the segment.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Branch From", Keywords = "Branch From"), Category = Statement)
		FString BranchFrom(const int32& index);

	/**
	* Called to check if a vertex in a statement has the same signature with another vertex in another statement. The other vertex is automatically found.
	* @param Vertex - An FString vertex to be compared.
	* @param OtherStatement - The Other statement from which the vertex is compared to.
	* @return boolean value of true or false.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Has Same Signature ", Keywords = "Same Signature"), Category = Statement)
		bool HasSameSignature(const FString& Vertex, UStatement* OtherStatement);

	/**
	* Called to check if a edge is equal to another edge in another statement. The comparing edge is automatically found.
	* @param EdgeIndex - An int32 index of the edge.
	* @param OtherStatement - The Other statement from which the edge is compared to.
	* @return boolean value of true or false.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Is EdgeEqual", Keywords = "Edge Equal"), Category = Statement)
		bool IsEdgeEqual(int32 EdgeIndex, UStatement* OtherStatement);

	/**
	* Called to check if the statement is incompatible with another statement.
	* @param OtherStatement - The comparing statement.
	* @return boolean value of true or false.
	*/
	UFUNCTION(BlueprintPure, meta = (DisplayName = "Is Incompatible With", Keywords = "Is Incompatible"), Category = Statement)
		bool IsIncompatibleWith(UStatement* OtherStatement);

	/**
	* Blueprint Function Called to generate a new Statement using a Blueprint Node
	* @param WorldContextObject - The World where to create the statement(its the default)
	* @return The pointer to the created statement.
	*/
	UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", DisplayName = "Create Object From Blueprint", Keywords = "new create blueprint"), Category = Statement)
		static UStatement* NewStatementFromBlueprint(UObject* WorldContextObject, const FString& Statement);

	/*
	* Operator override
	*/
	FORCEINLINE FString& operator[](int32 index)
	{
		return Vertices[index];
	}

	FORCEINLINE const FString& operator[](int32 index) const
	{
		return Vertices[index];
	}
	
	
	
	
};
